" These shortcuts work best if you have <leader> mapped to something convenient like ',' or '<Space>'

" Load your regular .vimrc
source ~/.vimrc

let mapleader = " "

map \r :action ReformatCode<CR>

nmap <leader><leader>s :action KJumpAction<cr>
nmap <leader><leader>w :action KJumpAction.Word0<cr>
nmap <leader><leader>l :action KJumpAction.Line<cr>

" vim delete and change, with sexps!
map <leader>x :action :cursive.actions.paredit/kill-sexp<CR>
map <leader>d :action :cursive.actions.paredit/kill<CR>
map <leader>c :action :cursive.actions.paredit/kill-sexp<CR>i

" Since kill copies to system clipboard, it's nice to have easy access to clipboard paste
map <leader>p "+p
map <leader>P "+P

" Sexp editing mappings straight from paredit.vim
map <leader>J :action :cursive.actions.paredit/join<CR>
map <leader>O :action :cursive.actions.paredit/split<CR>
map <leader>S :action :cursive.actions.paredit/splice<CR>
map <leader>I :action :cursive.actions.paredit/raise<CR>

" Splice backwards and forwards
map <leader>k :action :cursive.actions.paredit/splice-killing-backwards<CR>
map <leader>j :action :cursive.actions.paredit/splice-killing-forwards<CR>

" Slurp and barf
map <leader>l :action :cursive.actions.paredit/barf-forwards<CR>
map <leader>h :action :cursive.actions.paredit/slurp-forwards<CR>
map <leader>L :action :cursive.actions.paredit/slurp-backwards<CR>
map <leader>H :action :cursive.actions.paredit/barf-backwards<CR>

" leader + wrapping symbol for wrapping
map <leader>( :action :cursive.actions.paredit/wrap-paren<CR>
map <leader>[ :action :cursive.actions.paredit/wrap-square<CR>
map <leader>{ :action :cursive.actions.paredit/wrap-curly<CR>
map <leader>" :action :cursive.actions.paredit/wrap-quotes<CR>

" Cycle collection
map <leader>C :action :cursive.actions.paredit/cycle-collection-type<CR>

" Evaluate sexp like in vim-fireplace
map cpp :action :cursive.repl.actions/run-top-sexp<CR>

map <leader>n :action :cursive.repl.actions/switch-namespace<CR>
map <leader><leader>d :action QuickJavaDoc<CR>

" Force a single "parinference" when in paredit mode and reformat
map <leader>rp :action :cursive.actions.paredit/toggle<CR>:action :cursive.actions.paredit/toggle<CR>kj:action :cursive.actions.paredit/toggle<CR>:action ReformatCode<CR>

" Run tests from current window
map <leader>t :action :cursive.testing.actions/run-ns-tests<CR>

" :actionlist cursive

" :cursive.actions.paredit/backward                  <C-Left>
" :cursive.actions.paredit/backward-down
" :cursive.actions.paredit/backward-up
" :cursive.actions.paredit/barf-backwards            <A-C-K>
" :cursive.actions.paredit/barf-forwards             <A-S-J>
" :cursive.actions.paredit/clojure-edit-group
" :cursive.actions.paredit/clojure-navigate-group
" :cursive.actions.paredit/close-curly-and-newline   <C-S-]>
" :cursive.actions.paredit/close-paren-and-newline   <C-S-0>
" :cursive.actions.paredit/close-square-and-newline  <C-]>
" :cursive.actions.paredit/copy-as-kill              <A-S-D>
" :cursive.actions.paredit/cycle-collection-type
" :cursive.actions.paredit/forward                   <C-Right>
" :cursive.actions.paredit/forward-down
" :cursive.actions.paredit/forward-up
" :cursive.actions.paredit/join                      <C-S-S>
" :cursive.actions.paredit/kill                      <A-D>
" :cursive.actions.paredit/kill-sexp                 <A-C-D>
" :cursive.actions.paredit/move-form-down            <C-S-Down>
" :cursive.actions.paredit/move-form-up              <C-S-Up>
" :cursive.actions.paredit/raise                     <A-R>
" :cursive.actions.paredit/slurp-backwards           <A-C-J>
" :cursive.actions.paredit/slurp-forwards            <A-S-K>
" :cursive.actions.paredit/splice                    <A-S>
" :cursive.actions.paredit/splice-killing-backwards
" :cursive.actions.paredit/splice-killing-forwards
" :cursive.actions.paredit/split                     <A-S-S>
" :cursive.actions.paredit/thread-form               <A-C-,>
" :cursive.actions.paredit/toggle
" :cursive.actions.paredit/unthread-form             <A-C-.>
" :cursive.actions.paredit/wrap-curly                <C-S-[>
" :cursive.actions.paredit/wrap-paren                <C-S-9>
" :cursive.actions.paredit/wrap-quotes               <C-S-Ãž>
" :cursive.actions.paredit/wrap-square               <C-[>
" :cursive.editor.actions/show-type                  <A-=>
" :cursive.extensions.clojure.core.typed.actions/type-check-ns
" :cursive.repl.actions/clear-repl
" :cursive.repl.actions/clojure-repl-commands-group
" :cursive.repl.actions/clojure-repl-group
" :cursive.repl.actions/interrupt
" :cursive.repl.actions/jump-to-output
" :cursive.repl.actions/jump-to-repl                 <C-\>
" :cursive.repl.actions/load-file                    <A-S-L>
" :cursive.repl.actions/macroexpansion               <C-S-\>
" :cursive.repl.actions/next-history-item            <C-Down>
" :cursive.repl.actions/prev-history-item            <C-Up>
" :cursive.repl.actions/print-exception
" :cursive.repl.actions/run-last-sexp
" :cursive.repl.actions/run-top-sexp                 <A-S-P>
" :cursive.repl.actions/search-history               <A-C-E>
" :cursive.repl.actions/switch-namespace             <A-S-R>
" :cursive.repl.actions/sync-files                   <A-S-M>
" :cursive.repl.commands/add-new
" :cursive.repl.commands/edit
" :cursive.testing.actions/remove-test-markers
" :cursive.testing.actions/rerun-last-test
" :cursive.testing.actions/run-ns-tests
" :cursive.testing.actions/run-single-test
